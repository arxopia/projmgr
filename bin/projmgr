#!/usr/bin/env ruby
# encoding: utf-8

# projmgr - ProjMgr is a simple source code project manager for updating and checking local changes on multiple projects at once.
# Jacob Hammack <jacob.hammack@hammackj.com>
# http://www.hammackj.com
# 
# hammackj - 12-27-2010 - Version 0.0.1
# hammackj - 01-05-2011 - Version 0.0.2
# hammackj - 01-09-2011 - Version 0.0.3
# hammackj - 01-09-2011 - Version 0.0.4
#

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '/../lib'))

$stdout.sync = true
$stderr.sync = true

require 'rubygems'
require 'choice'
require 'yaml'

require 'projmgr'

module ProjMgr
	
	# ProjMgr Application class
	#
	# @author Jacob Hammack <jacob.hammack@hammackj.com>
	class ProjMgr
		
		# Creates a ProjMgr instance
		#
		def initialize
			@root = `pwd`.chomp
		end
		
		# Main class for the ProjMgr command line tool
		#
		def main
			Choice.options do
				banner "#{APP_NAME} - v#{VERSION}" 
				header 'Jacob Hammack'
				header 'http://hammackj.com'
				header "Usage: #{APP_NAME} [OPTIONS]"
				header ''

				option :check_local_changes do
					short '-c'
					long '--check_local_changes'
					desc 'Checks local changes in configured scm repositories'
				end
	
				option :update do
					short '-u'
					long '--update'
					desc 'Updates each configured scm repository'
				end
				
				option :checkout do
					long '--checkout-repos'
					desc "Checks out each repo if nothing exists at the 'path' variable"
				end
				
				option :create_config do
          long '--create-config'
          desc 'Creates a skeleton config file to use'
					action do						
						if File.exists?(File.expand_path(CONFIG_FILE)) == false
							File.open(File.expand_path(CONFIG_FILE), 'w+') do |f| 
								3.times do
									f.write("projectname: \n\tname: \n\tpath: \n\ttype: \n\turl: \n\n") 
								end
							end

							puts "[*] An empty #{CONFIG_FILE} has been created. Please edit and fill in the correct values."
							exit
						else
							puts "[!]  #{CONFIG_FILE} already exists. Please delete it if you wish to re-create it."
							exit
						end
					end
        end

				separator ''
				separator 'Other Options'

				option :help do
					short '-h'
					long '--help'
					desc 'Show this message'
				end

				option :version do
					short '-v'
					long '--version'
					desc 'Show version'
					action do
						puts "#{APP_NAME} - v#{VERSION}"
						exit
					end
				end
	
					footer ''
				end

				if ARGV.length == 0
					puts Choice.help
				end
			
				if File.exists?(File.expand_path(CONFIG_FILE))
					@repos = YAML.load_file File.expand_path(CONFIG_FILE)
				else
					puts "[!] #{CONFIG_FILE} does not exist. Please run projmgr --create-config, to create it."
					exit
				end
					
				begin
					@threads = Array.new
					@repos.each_key do |key|
						t = Thread.new do
							if @repos[key]['type'] == "svn"
								repo = Svn.new @repos[key]['name'], @repos[key]['path'], @root, @repos[key]['url']
							elsif @repos[key]['type'] == "git"
								repo = Git.new @repos[key]['name'], @repos[key]['path'], @root, @repos[key]['url']
							#elsif @repos[key]['type'] == "cvs"
							#	repo = Cvs.new @repos[key]['name'], @repos[key]['path'], @repos[key]['root'], @repos[key]['url']
							end
										
							if repo == nil
									print "[!] #{key} is a malformed entry please correct it.\n"
									next
							end
															
							if Choice.choices[:check_local_changes] != nil
								status = repo.has_local_changes?
																
								if status[0] == true
									print "[!] #{@repos[key]['name']} has local changes\n"
								#else
								#	print "[!] #{@repos[key]['name']} #{status[1]}\n"
								end
							elsif Choice.choices[:update] != nil
								print "[*] Updating #{@repos[key]['name']}...\n #{repo.update}\n"
							elsif Choice.choices[:checkout] != nil
								print "[*] Checking out #{@repos[key]['name']}...#{repo.checkout}\n"
							end
						end
						@threads << t
					end
					
					@threads.each do |t| 
						t.join 
					end
				rescue Exception => e
					puts "[!] Caught Exception, if you feel this is a error please report it at http://github.com/hammackj/projmgr/issues\n"
					puts "#{e.inspect}\n #{e.backtrace}"
				end
			end
		end
end

app = ProjMgr::ProjMgr.new
app.main
