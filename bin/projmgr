#!/usr/bin/env ruby
# encoding: utf-8

# projmgr - A source code control managment tool
# 
# hammackj - 12-27-2010 - Version 0.0.1 
#

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '/../lib'))

$stdout.sync = true
$stderr.sync = true

require 'projmgr'

module ProjMgr
	
	# ProjMgr Application class
	#
	# @author Jacob Hammack <jacob.hammack@hammackj.com>
	class ProjMgr
		
		# Creates a ProjMgr instance
		#
		def initialize
			@root = `pwd`
		end
		
		# Main class for the ProjMgr command line tool
		#
		def main
			Choice.options do
				banner "ProjMgr - v#{VERSION}" 
				header 'Jacob Hammack'
				header 'http://hammackj.com'
				header 'Usage: projmgr [OPTIONS]'
				header ''

				option :check_local_changes do
					short '-c'
					long '--check_local_changes'
					desc 'Checks local changes in configured scm repositories'
				end
	
				option :update do
					short '-u'
					long '--update'
					desc 'Updates each configured scm repository'
				end
				
				option :create_config do
          long '--create-config'
          desc 'Creates a skeleton config file to use'
					action do						
						if File.exists?(File.expand_path(CONFIG_FILE)) == false
							File.open(File.expand_path(CONFIG_FILE), 'w+') do |f| 
								f.write("projectname: \n\tname: \n\tpath: \n\ttype: \n\n") 
								f.write("projectname: \n\tname: \n\tpath: \n\ttype: \n") 
							end

							puts "[*] An empty #{CONFIG_FILE} has been created. Please edit and fill in the correct values."
							exit
						else
							puts "[!]  #{CONFIG_FILE} already exists. Please delete it if you wish to re-create it."
							exit
						end
					end
        end

				separator ''
				separator 'Other Options'

				option :help do
					short '-h'
					long '--help'
					desc 'Show this message'
				end

				option :version do
					short '-v'
					long '--version'
					desc 'Show version'
					action do
						puts "ProjMgr - v#{VERSION}"
						exit
					end
				end
	
					footer ''
				end

				if ARGV.length == 0
					puts Choice.help
				end
			
				if File.exists?(File.expand_path(CONFIG_FILE))
					@repos = YAML.load_file File.expand_path(CONFIG_FILE)
				else
					puts "[!] #{CONFIG_FILE} does not exist. Please run projmgr --create-config, to create it."
					exit
				end
					
				begin
					@threads = Array.new
					@repos.each_key do |key|
						t = Thread.new do
							if @repos[key]['type'] == "svn"
								repo = Svn.new @repos[key]['name'], @repos[key]['path'], @repos[key]['root']
							elsif @repos[key]['type'] == "git"
								repo = Git.new @repos[key]['name'], @repos[key]['path'], @repos[key]['root']
							end
					
							if repo == nil
									puts "[!] #{key} is a malformed entry please correct it."
									next
							end
															
							if Choice.choices[:check_local_changes] != nil
								puts "[!] #{@repos[key]['name']} has local changes" if repo.has_local_changes?
							elsif Choice.choices[:update] != nil
								puts "[*] Updating #{@repos[key]['name']}...\n #{repo.update}"
							end
						end
						@threads << t
					end
					
					@threads.each do |t| 
						t.join 
					end
				rescue Exception => e
					puts "[!] Caught Exception: #{e.inspect}"
				end
			end
		end
end

app = ProjMgr::ProjMgr.new
app.main
