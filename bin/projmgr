#!/usr/bin/env ruby

# projmgr - ProjMgr is a simple source code project manager for updating and checking local changes on multiple projects at once.
# Jacob Hammack <jacob.hammack@hammackj.com>
# http://www.hammackj.com
# 
# hammackj - 12-27-2010 - Version 0.0.1
# hammackj - 01-05-2011 - Version 0.0.2
# hammackj - 01-09-2011 - Version 0.0.3
# hammackj - 01-09-2011 - Version 0.0.4
# hammackj - 02-07-2011 - Version 0.0.5
# hammackj - 02-17-2011 - Version 0.0.6
# hammackj - 03-17-2011 - Version 0.0.7
# hammackj - 05-10-2011 - Version 0.0.8
#

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '/../lib'))

$stdout.sync = true
$stderr.sync = true

require 'rubygems'
require 'optparse'
require 'yaml'

require 'projmgr'

module ProjMgr
	
	# ProjMgr Application class
	#
	# @author Jacob Hammack <jacob.hammack@hammackj.com>
	class Application
		
		# Creates a ProjMgr instance
		#
		def initialize
			@root = `pwd`.chomp
		end
		
		# Main class for the ProjMgr command line tool
		#
		def main
			@options = {}

			opt = OptionParser.new do |opt|
				opt.banner =	"#{APP_NAME} v#{VERSION}\nJacob Hammack\nhttp://www.hammackj.com\n\n"
				opt.banner << "Usage: #{APP_NAME} <options>"
				opt.separator('')

				opt.on('-c','--check-local-changes','Checks for local changes in configured SCM repositories') do |option|
					@options[:check] = option
				end

				opt.on('-u','--update-repos','Updates each configured SCM repositories') do |option|
					@options[:update] = option
				end

				opt.on('--checkout-repos','Checks out each of the configured repositories') do |option|
					@options[:checkout] = option
				end

				opt.on('--create-config','Creates a skeleton configuration file to be used') do |option|
					if File.exists?(File.expand_path(CONFIG_FILE)) == false
						File.open(File.expand_path(CONFIG_FILE), 'w+') do |f| 
							3.times do
								f.write("projectname: \n  name: \n  path: \n  type: \n  url: \n\n") 
							end
						end

						puts "[*] An empty #{CONFIG_FILE} has been created. Please edit and fill in the correct values."
						exit
					else
						puts "[!]	 #{CONFIG_FILE} already exists. Please delete it if you wish to re-create it."
						exit
					end
				end
								
				opt.separator ''
				opt.separator 'Other Options'
			
				opt.on_tail('-v', '--version', "Shows application version information") do
					puts "#{APP_NAME} - v#{VERSION}"
					exit
				end

				opt.on_tail("-?", "--help", "Show this message") do
					puts opt.to_s + "\n"
					exit
				end

				opt.separator ''
			end

			if ARGV.length != 0 
				opt.parse!
			else
				puts opt.to_s + "\n"
				exit
			end

			if File.exists?(File.expand_path(CONFIG_FILE))
				@repos = YAML.load_file File.expand_path(CONFIG_FILE)
			else
				puts "[!] #{CONFIG_FILE} does not exist. Please run projmgr --create-config, to create it."
				exit
			end

			begin
				@threads = Array.new
				@repos.each_key do |key|
					t = Thread.new do
						if @repos[key]['type'] == "svn"
							repo = Svn.new @repos[key]['name'], @repos[key]['path'], @root, @repos[key]['url']
						elsif @repos[key]['type'] == "git"
							repo = Git.new @repos[key]['name'], @repos[key]['path'], @root, @repos[key]['url']
						elsif @repos[key]['type'] == "cvs"
						 repo = Cvs.new @repos[key]['name'], @repos[key]['path'], @repos[key]['root'], @repos[key]['url']
						end

						if repo == nil
								print "[!] #{key} is a malformed entry please correct it.\n"
								next
						end

						if @options[:check] != nil
							status = repo.has_local_changes?

							if status[0] == true
								print "[!] #{@repos[key]['name']} has local changes\n"
							#else
							# print "[!] #{@repos[key]['name']} #{status[1]}\n"
							end
						elsif @options[:update] != nil
							print "[*] Updating #{@repos[key]['name']}...\n #{repo.update}\n"
						elsif @options[:checkout] != nil
							print "[*] Checking out #{@repos[key]['name']}...#{repo.checkout}\n"
						end
					end
					@threads << t
				end

				@threads.each do |t| 
					t.join 
				end
			rescue Exception => e
				puts "[!] Caught Exception, if you feel this is a error please report it at http://github.com/hammackj/projmgr/issues\n"
				puts "#{e.inspect}\n #{e.backtrace}"
			end
		end
	end
end

app = ProjMgr::Application.new
app.main
